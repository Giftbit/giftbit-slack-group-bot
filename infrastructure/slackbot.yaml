AWSTemplateFormatVersion: 2010-09-09
Description: Deployment of the SlackBot

Parameters:
  GroupBotProject:
    Type: String
    Description: The Group Bot Project Name. This will prefix the component functions.
  Accounts:
    Type: String
    Description: JSON Object of Account Name to Account ID Pairs
  SlackToken:
    Type: String
    Description: The Slack Token that should be used to authenticate incoming requests
    NoEcho: true
    Default: ""
  RoleNameToGrantPolicyAccess:
    Type: String
    Description: The Name of a role to Grant Policy Access for the S3 Data Store (useful for CI)
    Default: ""

Conditions:
  RoleNameToGrantPolicyAccessSet: !Not [!Equals [!Ref RoleNameToGrantPolicyAccess, ""]]

Resources:
  S3DataStore:
    Type: AWS::S3::Bucket
  S3DataStorePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3DataStore
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub "arn:aws:s3:::${S3DataStore}/verifications/*/${!aws:username}/${!aws:userid}/*"
            Principal: "*"
            Condition:
              StringEquals:
                aws:principaltype:
                  - User
          -
            Effect: Deny
            Action:
              - s3:*
            NotResource:
              - !Sub "arn:aws:s3:::${S3DataStore}/verifications/*/${!aws:username}/${!aws:userid}/*"
            Principal: "*"
            Condition:
              StringEquals:
                aws:principaltype:
                  - User
          -
            Effect: Deny
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${S3DataStore}/*"
              - !Sub "arn:aws:s3:::${S3DataStore}"
            Principal: "*"
            Condition:
              StringEquals:
                aws:principaltype: FederatedUser
          - !If
            - RoleNameToGrantPolicyAccessSet
            -
              Effect: Deny
              NotAction:
                - s3:PutBucketPolicy
                - s3:GetBucketPolicy
                - s3:DeleteBucketPolicy
              Resource:
                - !Sub "arn:aws:s3:::${S3DataStore}/*"
                - !Sub "arn:aws:s3:::${S3DataStore}"
              Principal: "*"
              Condition:
                StringLike:
                  aws:userid: !Ref PolicyAccessRoleId
            - !Ref AWS::NoValue
          -
            Effect: Deny
            Action:
              - s3:*
            Principal: "*"
            Resource:
              - !Sub "arn:aws:s3:::${S3DataStore}/*"
              - !Sub "arn:aws:s3:::${S3DataStore}"
            Condition:
              StringNotLike:
                aws:userid:
                  - !Ref SlackBotRoleIds
                  - !If
                    - RoleNameToGrantPolicyAccessSet
                    - !Ref PolicyAccessRoleId
                    - !Ref AWS::NoValue
              StringEquals:
                aws:principaltype: AssumeRole

  SlackBotRoleIds:
    Type: AWS::CloudFormation::CustomResource
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt RoleLookupLambda.Arn
      RoleNames: !Join
        - ","
        -
          - !Ref SlackBotBackgroundRole
          - !Ref SlackBotRole
  PolicyAccessRoleId:
    Type: AWS::CloudFormation::CustomResource
    Condition: RoleNameToGrantPolicyAccessSet
    Properties:
      ServiceToken: !GetAtt RoleLookupLambda.Arn
      RoleNames: !Ref RoleNameToGrantPolicyAccess

  SlackBotBackgroundFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../dist/slackBotBackground/slackBotBackground.zip
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: 30
      Role: !GetAtt SlackBotBackgroundRole.Arn
      Environment:
        Variables:
          GROUP_BOT_PROJECT: !Ref GroupBotProject
          REGION: !Ref AWS::Region
          DATA_STORE_BUCKET: !Ref S3DataStore
          ALLOW_SELF_APPROVAL: true
  SlackBotBackgroundRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${GroupBotProject}-SlackBotBackgroundRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        -
          PolicyName: SlackBotAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3DataStore}"
                  - !Sub "arn:aws:s3:::${S3DataStore}/*"
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:*:function:${GroupBotProject}-IamAgent"
  ScheduledBackgroundCleanupInvocationRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Cleanup Invocation
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt SlackBotBackgroundFunction.Arn
          Id: SlackBotBackgroundCleanupTarget
  SlackBotBackgroundCleanupInvokeAccess:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SlackBotBackgroundFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledBackgroundCleanupInvocationRule.Arn
  SlackBotGroupBackgroundFunctionInvokeAccess:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SlackBotBackgroundFunction.Arn
      Principal: !GetAtt SlackBotRole.Arn
  SlackBotFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../dist/slackBot/slackBot.zip
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: 30
      Role: !GetAtt SlackBotRole.Arn
      Environment:
        Variables:
          ACCOUNTS: !Ref Accounts
          TOKEN: !Ref SlackToken
          GROUP_BOT_PROJECT: !Ref GroupBotProject
          REGION: !Ref AWS::Region
          SLACK_BOT_BACKGROUND_TASK_LAMBDA_ARN: !GetAtt SlackBotBackgroundFunction.Arn
          DATA_STORE_BUCKET: !Ref S3DataStore
          ACCOUNT_ID: !Ref AWS::AccountId
  SlackBotRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${GroupBotProject}-SlackBotRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        -
          PolicyName: SlackBotAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3DataStore}"
                  - !Sub "arn:aws:s3:::${S3DataStore}/*"
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        info:
          version: 1.0
          title: !Ref 'AWS::StackName'
        paths:
          /webhook:
            post:
              responses:
                "200":
                  description: 200 response
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SlackBotFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: ""
                requestTemplates:
                  application/x-www-form-urlencoded: |-
                    ## From https://github.com/jrstarke/aws-api-gateway-bodyparser/blob/master/aws-api-gateway-bodyparser.vtl
                    ## Parses x-www-urlencoded data to JSON for AWS' API Gateway
                    ##
                    ## Author: Christian E Willman <christian@willman.io>

                    #if ( $context.httpMethod == "POST" )
                      #set( $requestBody = $input.path('$') )
                    #else
                      #set( $requestBody = "" )
                    #end

                    #set( $keyValuePairs = $requestBody.split("&") )
                    #set( $params = [] )

                    ## Filter empty key-value pairs
                    #foreach( $kvp in $keyValuePairs )
                      #set( $operands = $kvp.split("=") )

                      #if( $operands.size() == 1 || $operands.size() == 2 )
                        #set( $success = $params.add($operands) )
                      #end
                    #end

                    {
                      #foreach( $param in $params )
                        #set( $key = $util.urlDecode($param[0]) )

                        #if( $param.size() > 1 && $param[1].length() > 0 )
                          #set( $value = $util.urlDecode($param[1]) )
                        #else
                          #set( $value = "" )
                        #end

                        "$key": "$value"#if( $foreach.hasNext ),#end
                      #end
                    }
        swagger: 2.0
  SlackBotFunctionRestApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref SlackBotFunction
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*"
  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
      StageName: Prod
  IamAgent:
    Type: AWS::CloudFormation::Stack
    DependsOn: SlackBotRole
    Properties:
      TemplateURL: ./iam-agent.yaml
      Parameters:
        GroupBotProject: !Ref GroupBotProject
        GroupBotSlackBotAccount: !Ref AWS::AccountId

  RoleLookupRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        -
          PolicyName: RoleAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - iam:GetRole
                Resource: "*"
  RoleLookupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: >
        Backs a CloudFormation Custom Resource for looking up Role Unique IDs (useful in locking down buckets)
      Role: !GetAtt RoleLookupRole.Arn
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: 15
      Code: ../res/role-id-lookup.zip

Outputs:
  GroupBotProject:
    Description: The GroupBotProject name, As it should be provided to the IAM Agent
    Value: !Ref GroupBotProject
  GroupBotSlackBotAccount:
    Description: The Account ID that contains the Slack Bot, As it should be provided to the IAM Agent
    Value: !Ref AWS::AccountId
  WebhookUrl:
    Description: The Webhook URL to give Slack
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/webhook"
